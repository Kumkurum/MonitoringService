// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package monitoringGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MonitoringGrpcServiceClient is the client API for MonitoringGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoringGrpcServiceClient interface {
	GetAllInfo(ctx context.Context, in *AllInfoRequest, opts ...grpc.CallOption) (*AllInfoResponse, error)
}

type monitoringGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringGrpcServiceClient(cc grpc.ClientConnInterface) MonitoringGrpcServiceClient {
	return &monitoringGrpcServiceClient{cc}
}

func (c *monitoringGrpcServiceClient) GetAllInfo(ctx context.Context, in *AllInfoRequest, opts ...grpc.CallOption) (*AllInfoResponse, error) {
	out := new(AllInfoResponse)
	err := c.cc.Invoke(ctx, "/MonitoringGrpcService/GetAllInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringGrpcServiceServer is the server API for MonitoringGrpcService service.
// All implementations must embed UnimplementedMonitoringGrpcServiceServer
// for forward compatibility
type MonitoringGrpcServiceServer interface {
	GetAllInfo(context.Context, *AllInfoRequest) (*AllInfoResponse, error)
	mustEmbedUnimplementedMonitoringGrpcServiceServer()
}

// UnimplementedMonitoringGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMonitoringGrpcServiceServer struct {
}

func (UnimplementedMonitoringGrpcServiceServer) GetAllInfo(context.Context, *AllInfoRequest) (*AllInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInfo not implemented")
}
func (UnimplementedMonitoringGrpcServiceServer) mustEmbedUnimplementedMonitoringGrpcServiceServer() {}

// UnsafeMonitoringGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringGrpcServiceServer will
// result in compilation errors.
type UnsafeMonitoringGrpcServiceServer interface {
	mustEmbedUnimplementedMonitoringGrpcServiceServer()
}

func RegisterMonitoringGrpcServiceServer(s *grpc.Server, srv MonitoringGrpcServiceServer) {
	s.RegisterService(&_MonitoringGrpcService_serviceDesc, srv)
}

func _MonitoringGrpcService_GetAllInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringGrpcServiceServer).GetAllInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonitoringGrpcService/GetAllInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringGrpcServiceServer).GetAllInfo(ctx, req.(*AllInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitoringGrpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MonitoringGrpcService",
	HandlerType: (*MonitoringGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllInfo",
			Handler:    _MonitoringGrpcService_GetAllInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
